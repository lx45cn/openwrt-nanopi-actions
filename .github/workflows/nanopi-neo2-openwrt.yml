name: Build neo2

on: 
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: 0 8 * * 5

env:
  DEVICENAME: NEO2
  REPO_URL: https://github.com/project-openwrt/openwrt
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: ./Device/neo2/.config
  DIY_P1_SH: ./Device/neo2/diy-part1.sh
  DIY_P2_SH: ./Device/neo2/diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: true
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout Repository ÊµãËØï
      uses: actions/checkout@v2

    - name: MachineType ÁºñËØëÊú∫Âô®Á±ªÂûã
      run: |
        cat /proc/cpuinfo
        cat /proc/meminfo
        cat /etc/issue
        cat /proc/version

    - name: CustomFileAvaliableTest ÊµãËØïÈÖçÁΩÆÊñá‰ª∂ÊòØÂê¶Â≠òÂú®
      run: |
        echo "Test"
        echo "FEEDS_CONF"
        [ -e $FEEDS_CONF ] &&cat $FEEDS_CONF
        echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        cat $CONFIG_FILE
        echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        cat $DIY_P1_SH
        echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        cat $DIY_P2_SH
        echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        [ -e $PATCH_1 ] && cat $PATCH_1
        echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"


    - name: Init Building Dependencies ÂàùÂßãÂåñÁºñËØë‰æùËµñ
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo -E apt-get remove -y --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell mysql* php* mssql-tools msodbcsql17 android*
        sudo -E apt-get update -y
        sudo -E apt-get full-upgrade -y
        sudo -E apt-get install -y build-essential asciidoc binutils bzip2 coreutils gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-8 gcc++-8 gcc-8-multilib g++-8-multilib p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python python3 python-pip python3-pip python-ply python3-ply haveged lrzsz device-tree-compiler scons antlr3 gperf ecj fastjar re2c xz-utils tar
        for i in $(ls /usr/bin/*-8); do sudo -E ln -sf $i ${i%%-8*}; done 
        sudo -E ln -sf /usr/include/asm-generic /usr/include/asm
        sudo -E apt-get autoremove -y --purge
        sudo -E apt-get clean -y
        sudo -E swapoff -a
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android /opt/ghc /swapfile
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Checkout Repository ÊµãËØï
      uses: actions/checkout@v2

    - name: Clone Source ‰∏ãËΩΩÊ∫êÁ†Å
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds ÂØºÂÖ•ÈÖçÁΩÆ
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update/Install feeds Êõ¥Êñ∞Âπ∂ÂÆâË£ÖÊ∫êÁ†ÅÂ∫ì
      run: |
       cd openwrt
       ./scripts/feeds update -a
       ./scripts/feeds install -a 
    
    #- name: Add patch ÊâìË°•‰∏Å
    #  run: |
    #    cd openwrt
    #    wget https://raw.githubusercontent.com/1715173329/nanopi-r4s-openwrt/master/patches/snapshot-modify_for_r4s.patch
    #    patch -p1 < "snapshot-modify_for_r4s.patch"
    #    #patch -p1 < "${GITHUB_WORKSPACE}/Device/r4s/patches/snapshot-modify_for_r4s.patch"

    - name: Load custom configuration Ëá™ÂÆö‰πâÈÖçÁΩÆ
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package ‰∏ãËΩΩÂåÖ
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile ÁºñËØë
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s

        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: ReCompile to Collect Error Log ÁºñËØëÈîôËØØÂéüÂõ†
      if: failure()
      run: |
        cd openwrt
        make -j1 V=s
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage Ê£ÄÊü•Á£ÅÁõò‰ΩøÁî®
      if: (!cancelled())
      run: df -hT

    - name: Checkout Repository ÊµãËØï
      uses: actions/checkout@v2

    - name: Upload bin directory ‰∏ä‰º†ÁõÆÂΩï
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files ÁªÑÁªáÊñá‰ª∂
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled() && !failure()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory ‰∏ä‰º†Âõ∫‰ª∂Ë∑ØÂæÑ
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer ‰∏ä‰º†Âõ∫‰ª∂Âà∞Â•∂ÁâõÂø´‰º†
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

    - name: Upload firmware to WeTransfer ‰∏ä‰º†Âõ∫‰ª∂Âà∞WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

    - name: Generate release tagÁîüÊàêtag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "üîó [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "üîó [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"

    - name: Upload firmware to release ‰∏ä‰º†Âõ∫‰ª∂Âà∞release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*
  Cleanup-Old-Artifacts:
    needs: [Build]
    runs-on: ubuntu-18.04
    steps:
    - name: Cleanup Old Action Artifacts
      uses: kolpav/purge-artifacts-action@v1
      with:
        token: ${{ github.token }}
        expire-in: 7d
  Cleanup-Workflow-Runs:
    needs: [Cleanup-Old-Artifacts]
    runs-on: ubuntu-18.04
    steps:
      - name: Cleanup Workflow Runs
        uses: qhlai/delete-workflow-runs@main
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 7
